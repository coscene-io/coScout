name: Publish Public coScout

on:
  release:
    types:
      - released
      - prereleased

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get Version
        id: get_version
        run: |
          echo $(git describe --always --tags --abbrev=8 --dirty)
          echo "version=$(git describe --always --tags --abbrev=8 --dirty)" >> "$GITHUB_OUTPUT"
    outputs:
      version: ${{ steps.get_version.outputs.version }}

  upload-cli-artifact-to-oss:
    strategy:
      matrix:
        include:
          - arch: amd64
            os: linux
          - arch: amd64
            os: darwin
          - arch: arm64
            os: linux
          - arch: arm64
            os: darwin
          - arch: arm
            os: linux
    runs-on: ubuntu-latest
    environment: azure-dev-east-us
    needs: [ check ]
    permissions:
      contents: write
    steps:
      - name: Check if version is release or beta
        env:
          VERSION: ${{ needs.check.outputs.version }}
        run: |
          if echo "$VERSION" | grep -q -E '^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$'; then
            echo "IS_RELEASE=true" >> $GITHUB_ENV
            echo "VERSION_TAG=latest" >> $GITHUB_ENV
          else
            echo "IS_RELEASE=false" >> $GITHUB_ENV
            echo "VERSION_TAG=beta" >> $GITHUB_ENV
          fi
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.x
          check-latest: true
          cache: true
      - name: Set up CD tools
        uses: coscene-io/setup-cd-tools@v2.0.1
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: "true"
      - name: Set up buf netrc
        uses: extractions/netrc@v2
        with:
          machine: buf.build
          username: ${{ secrets.BUF_USERNAME }}
          password: ${{ secrets.BUF_TOKEN }}
      - name: Set up github netrc
        uses: extractions/netrc@v2
        with:
          machine: github.com
          username: ${{ secrets.GH_PACKAGES_ORG_USERNAME }}
          password: ${{ secrets.GH_PACKAGES_ORG_TOKEN }}
      - name: Install gzip
        run: sudo apt-get update && sudo apt-get install -y gzip
      - name: Build coScout agent
        env:
          VERSION: ${{ needs.check.outputs.version }}
        run: |
          CGO_ENABLED=0 GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} make build-binary VERSION="$VERSION"
          cp bin/cos cos
          chmod +x cos
      - name: Build metadata files
        env:
          VERSION: ${{ needs.check.outputs.version }}
        run: |
          SHA256SUM=$(sha256sum cos | awk '{print $1}' | xxd -r -p | base64) 
          echo "{\"Version\": \"$VERSION\", \"Sha256\": \"$SHA256SUM\"}" > ${{ matrix.os }}-${{ matrix.arch }}.json
      - name: gzip coscout
        run: gzip cos
      - name: Upload cos agent to oss
        uses: tvrcgo/oss-action@master
        with:
          key-id: ${{ secrets.ACK_ACCESS_KEY_ID }}
          key-secret: ${{ secrets.ACK_ACCESS_KEY_SECRET }}
          region: oss-cn-hangzhou
          bucket: coscene-download
          assets: |
            cos.gz:/coscout/v2/versions/${{ needs.check.outputs.version }}/${{ matrix.os }}-${{ matrix.arch }}.gz
            ${{ matrix.os }}-${{ matrix.arch }}.json:/coscout/v2/versions/${{ needs.check.outputs.version }}/${{ matrix.os }}-${{ matrix.arch }}.json
      - name: Upload coscli release metadata files to oss
        if: env.IS_RELEASE == 'true'
        uses: tvrcgo/oss-action@master
        with:
          key-id: ${{ secrets.ACK_ACCESS_KEY_ID }}
          key-secret: ${{ secrets.ACK_ACCESS_KEY_SECRET }}
          region: oss-cn-hangzhou
          bucket: coscene-download
          assets: |
            cos.gz:/coscout/v2/latest/${{ matrix.os }}-${{ matrix.arch }}.gz
            ${{ matrix.os }}-${{ matrix.arch }}.json:/coscout/v2/latest/${{ matrix.os }}-${{ matrix.arch }}.json
            script/install.sh:/coscout/v2/install.sh
      - name: Upload coscli beta metadata files to oss
        if: env.IS_RELEASE == 'false'
        uses: tvrcgo/oss-action@master
        with:
          key-id: ${{ secrets.ACK_ACCESS_KEY_ID }}
          key-secret: ${{ secrets.ACK_ACCESS_KEY_SECRET }}
          region: oss-cn-hangzhou
          bucket: coscene-download
          assets: |
            cos.gz:/coscout/v2/beta/${{ matrix.os }}-${{ matrix.arch }}.gz
            ${{ matrix.os }}-${{ matrix.arch }}.json:/coscout/v2/beta/${{ matrix.os }}-${{ matrix.arch }}.json
            script/install.sh:/coscout/v2/install-beta.sh

      - name: Replace download link in script/install.sh
        run: |
            sed -i "s#https://download.coscene.cn#https://coscene-download.s3.us-east-1.amazonaws.com#g" script/install.sh

      - name: Upload to S3
        run: |
          aws s3 cp cos.gz s3://coscene-download/coscout/v2/${{ env.VERSION_TAG }}/${{ matrix.os }}-${{ matrix.arch }}.gz
          aws s3 cp ${{ matrix.os }}-${{ matrix.arch }}.json s3://coscene-download/coscout/v2/${{ env.VERSION_TAG }}/${{ matrix.os }}-${{ matrix.arch }}.json
          if [ "${{ env.IS_RELEASE }}" == "true" ]; then
            aws s3 cp script/install.sh s3://coscene-download/coscout/v2/install.sh
          else
            aws s3 cp script/install.sh s3://coscene-download/coscout/v2/install-beta.sh
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_ARTIFACTS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_ARTIFACTS_ACCESS_SECRET }}
          AWS_DEFAULT_REGION: 'us-east-1'
